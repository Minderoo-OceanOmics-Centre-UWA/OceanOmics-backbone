---
title: "Merge all trees"
format: html
editor: visual
---

```{r setup}
library(tidyverse)
library(ape)
library(ggtree)
library(phytools)
library(phangorn)
```

# Master list

We have a master list of all marine vertebrates.

```{r}
a <- readxl::read_xlsx('./Master Species List - Marine Vertebrates.xlsx', guess_max = 10000)
marine_species <- a$species
marine_species <- gsub(pattern = ' ', replacement = '_', marine_species)
```

# Bony fish and sharks/rays

Download the trees:

```{r}
if(!file.exists('betancur_r.tre')) {
download.file('https://static-content.springer.com/esm/art%3A10.1186%2Fs12862-017-0958-3/MediaObjects/12862_2017_958_MOESM2_ESM.tre', 'betancur_r.tre')
}
```

```{r}
if(!file.exists('sharktree.nex')){
download.file('https://data.vertlife.org/sharktree/610.tree.10Cal.RAxML.BS.nex', 'sharktree.nex')
}
```

```{r}
sharks <- ape::read.nexus('sharktree.nex')
#write.tree(sharks, 'sharktree.tre')

bonys <- ape::read.tree('betancur_r.tre')
bonys2 <- fishtree::fishtree_phylogeny()
```

Have to rename the bony fish labels, they have family and G IDs in there.

```{r}
bonys$tip.label <- word(bonys$tip.label, start = 2, end = 3, sep = '_')
#write.tree(bonys, 'betancur_r_short_labels.tre')
```

Do we have an intersection of labels? Otherwise we cannot merge

```{r}
intersect(bonys$tip.label, sharks$tip.label)
```

I initially used bind.tree which is blazing fast but just yeets trees onto each other, there's no conflict resolution. We can't do that.

```{r}
#big_tree <- ape::bind.tree(bonys, sharks)
#big_tree <- ape::bind.tree(big_tree, bonys2)
```

# Adding Aves

```{r}
if(!file.exists('aves.tre')){
  download.file('https://erda.ku.dk/archives/341f72708302f1d0c461ad616e783b86/B10K/data_upload/03_species_trees/63K.tre', 'aves.tre')
}
```

```{r}
aves <- read.tree('aves.tre')
```

# Adding Mammalia

```{r}
mammals <- read.tree('./RAxML_bipartitions.result_FIN4_raw_rooted_wBoots_4098mam1out_OK.newick')
mammals$tip.label <- word(mammals$tip.label, start = 1, end = 2, sep='_')
mammals
```

# Adding reptiles (seasnakes)

sssssss i'm a snake

```{r}
if(!file.exists('reptiles.tre')) {
  download.file('https://static-content.springer.com/esm/art%3A10.1186%2F1471-2148-13-93/MediaObjects/12862_2013_2346_MOESM1_ESM.txt', 'reptiles.tre')
}
```

```{r}
reptiles <- read.tree('reptiles.tre')
```

# Other vertebrate tree

there's also this vertebrate tree: https://datadryad.org/dataset/doi:10.5061/dryad.3c6d2

```{r}
if(!file.exists('vert.tre')){
download.file('https://dryad-assetstore-merritt-west.s3.us-west-2.amazonaws.com/ark%3A/13030/m5867gh3%7C1%7Cproducer/vertTree.tre?response-content-disposition=attachment%3B%20filename%3DvertTree.tre&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA2KERHV5E3OITXZXC%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T014242Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=44adc9498fd71c1c2e165d91a3a9f326092f2a1e5df0096a9c15cb781b3d7c07', 'vert.tre')
}
```

```{r}
merged <- read.tree('vert.tre')
```

The shark tree and the actinopterygii tree have overlapping species so they can be connected, while the Aves and Reptilia tree does not. So I'm using this vertebrate tree as a 'connector'. We'll use this as a 'backbone' so that the Aves tree for example has something to hang onto.


# Binding all trees

As a test, let's just 'stupidly' bind all trees together. We do not use this in the end.

```{r}
colors <- tibble(label = setdiff(bonys$tip.label, bonys2$tip.label), source = 'actinops1') %>% 
  rbind(tibble(label = setdiff(bonys2$tip.label, bonys$tip.label), source = 'actinops2')) %>%
  rbind(tibble(label = intersect(bonys$tip.label, bonys2$tip.label), source = 'actinops1+2')) %>%
  rbind(tibble(label = sharks$tip.label, source = 'sharks')) %>% 
  rbind(tibble(label = reptiles$tip.label, source = 'reptilia')) %>% 
  rbind(tibble(label = aves$tip.label, source = 'aves')) %>% 
  rbind(tibble(label = mammals$tip.label, source = 'mammalia'))


bound_t <- bind.tree(reptiles, bind.tree(sharks, bind.tree(bonys2, bind.tree(bonys, bind.tree(aves, mammals)))))

```

```{r}
result <- split(colors$label, colors$source)

groupOTU(ggtree(bound_t, branch.length = 'none', layout = 'circular'), result, 'source') + aes(color = source)

```

```{r}

res2 <- result
res2$actinops2 <- NULL
res2$actinops1 <- NULL
res2$`actinops1+2` <- NULL
groupOTU(ggtree(drop.tip(bound_t, union(bonys$tip.label, bonys2$tip.label)), branch.length = 'none', layout = 'circular'), res2, 'source')  + aes(color = source)

```

```{r}
bound_t$edge.length <- NULL
```

```{r}
write.tree(bound_t, 'bound_phylo.tre')
```

# merging all trees

This takes *DAYS*. We do not use this.

```{r}
#| eval: false

trees <- c(merged, bonys, bonys2, sharks, mammals, aves, reptiles)
class(trees) <- "multiPhylo"

if(!file.exists('big_tree.Actinopterygii.Chondrichtyes.Mammalia.Aves.Reptilia.tre')) {
    big_tree <- phangorn::superTree(trees, method = 'MRP', multicore = TRUE, mc.cores = 200, trace = 4,
                                rooted = TRUE)
}
```

Let's also make one WITHOUT the merged tree

```{r}

#| eval: false

trees <- c(bonys, bonys2, sharks, mammals, aves, reptiles)
class(trees) <- "multiPhylo"

if(!file.exists('big_tree.Actinopterygii.Chondrichtyes.Mammalia.Aves.Reptilia.NoBack.tre')) {
    big_tree2 <- phangorn::superTree(trees, method = 'MRP', multicore = TRUE, mc.cores = 200, trace = 4,
                                rooted = TRUE)
}
```

```{r}
#| eval: false

ape::write.tree(phy = big_tree, 'big_tree.Actinopterygii.Chondrichtyes.Mammalia.Aves.Reptilia.tre')
ape::write.tree(phy = big_tree2, 'big_tree.Actinopterygii.Chondrichtyes.Mammalia.Aves.Reptilia.noVertebrataBackbone.tre')
  
```

```{r}
intersect(big_tree2$tip.label, bonys$tip.label) %>% length()
intersect(big_tree2$tip.label, bonys2$tip.label) %>% length()
intersect(big_tree2$tip.label, aves$tip.label) %>% length()
intersect(big_tree2$tip.label, reptiles$tip.label) %>% length()
intersect(big_tree2$tip.label, sharks$tip.label) %>% length()
intersect(big_tree2$tip.label, mammals$tip.label) %>% length()

```

```{r}
colors <- tibble(label = setdiff(bonys$tip.label, bonys2$tip.label), source = 'actinops1') %>% 
  rbind(tibble(label = setdiff(bonys2$tip.label, bonys$tip.label), source = 'actinops2')) %>%
  rbind(tibble(label = intersect(bonys$tip.label, bonys2$tip.label), source = 'actinops1+2')) %>%
  rbind(tibble(label = sharks$tip.label, source = 'sharks')) %>% 
  rbind(tibble(label = reptiles$tip.label, source = 'reptilia')) %>% 
  rbind(tibble(label = aves$tip.label, source = 'aves')) %>% 
  rbind(tibble(label = mammals$tip.label, source = 'mammalia'))
```

```{r}
p <- ggtree(big_tree2, branch.length = 'none') %<+% colors + geom_tippoint(size=1, aes(color = source)) + scale_color_discrete(na.value='transparent')
#ggsave('tree_with_families_added.all_sources.png', p)
p
```

# Merging only the fish tree

We've decided on a new thing: we'll do a 'proper' merge of the two actinops trees and then bind the other trees to that supertree.

That way we *should* get the best of both worlds. We will use this for everything.

```{r}
this_trees <- list(bonys1 = bonys, bonys2 = bonys2)
class(this_trees) <- 'multiPhylo'
if(!file.exists('big_tree.Actinopterygii.both.tre')) {

job::job({
  bonys_merged <- phangorn::superTree(this_trees, method = 'MRP', multicore = TRUE, mc.cores = 200, trace = 4,
                                rooted = TRUE)
})
  write.tree(bonys_merged, 'big_tree.Actinopterygii.both.tre')
} else{
 bonys_merged <- read.tree('big_tree.Actinopterygii.both.tre') 
}

```

```{r}
bound_t_merged_bonies <- bind.tree(bonys_merged, bind.tree(reptiles, bind.tree(sharks, bind.tree(aves, mammals))))

```

```{r}
colors <- tibble(label = setdiff(bonys$tip.label, bonys2$tip.label), source = 'actinops1') %>% 
  rbind(tibble(label = setdiff(bonys2$tip.label, bonys$tip.label), source = 'actinops2')) %>%
  rbind(tibble(label = intersect(bonys$tip.label, bonys2$tip.label), source = 'actinops1+2')) %>%
  rbind(tibble(label = sharks$tip.label, source = 'sharks')) %>% 
  rbind(tibble(label = reptiles$tip.label, source = 'reptilia')) %>% 
  rbind(tibble(label = aves$tip.label, source = 'aves')) %>% 
  rbind(tibble(label = mammals$tip.label, source = 'mammalia'))
```

```{r}
p <- ggtree(bound_t_merged_bonies, branch.length = 'none', layout = 'circular') %<+% colors + geom_tippoint(size=1, aes(color = source)) + scale_color_discrete(na.value='transparent')
ggsave('tree_without_families_added.all_sources.png', p)
p
```

```{r}
groupOTU(ggtree(bound_t_merged_bonies, branch.length = 'none', layout = 'circular'), result, 'source') + aes(color = source)

```

Write out colors for ITOL:

```{r}
colors |> mutate(color = case_when(str_detect(source,  'actinops') ~ 'red', source == 'aves' ~ 'orange',source == 'mammalia' ~ 'green', source == 'reptilia' ~ 'blue', source == 'sharks' ~ 'pink')) |> select(label, color, source) |> write_tsv('colors.csv')
```

## Adding genera-level species

Now we add the marine species not in any of those trees.

First, we merge species into their relative genera:

```{r}
tip_labels <- bound_t_merged_bonies$tip.label
duplicates <- tip_labels[duplicated(tip_labels)]

# Create a list of tips to remove (keeping the first occurrence of each duplicate)
tips_to_remove <- character(0)
for (dup in duplicates) {
  # Find all occurrences of this duplicate
  occurrences <- which(tip_labels == dup)
  # Keep the first one, remove the rest
  tips_to_remove <- c(tips_to_remove, tip_labels[occurrences[-1]])
}

# Drop the duplicate tips
bound_t_merged_bonies_unique <- drop.tip(bound_t_merged_bonies, tips_to_remove)
```


```{r}
species_in_tree <- bound_t_merged_bonies_unique$tip.label %>% unique()

missing_verts <- setdiff(marine_species, species_in_tree)
print(paste0('missing verts: ', length(missing_verts), ' marine verts: ', length(a$species), ' species in tree: ', length(species_in_tree)))
# Conversely, the merged tree has a bunch of non-marine verts - Homo sapiens, Mus musculus, etc.
# those will be useful when we add marine vertebrates!

# now pull out one species per genus from our tree, those we will bind to
species_in_tree_tibble <- tibble(reference = species_in_tree) %>% 
  mutate(genus = word(reference, start = 1, end = 1, sep = '_')) %>% 
  group_by(genus) %>% 
  slice_head(n=1) %>% ungroup()

dato <- tibble(bind = missing_verts) %>% 
  mutate(bind_g = word(bind, start = 1, end = 1, sep = '_')) %>% 
  left_join(species_in_tree_tibble, by = c('bind_g' = 'genus')) %>% 
    filter(!is.na(reference)) %>% 
  mutate(poly = FALSE)
```

```{r}
genera_in_tree <- species_in_tree %>% word(1, 1, sep = '_') %>% unique()
dato <- dato %>% filter(bind_g %in% genera_in_tree)
```

If we have genera in the dato frame that are not in the tree we're binding to (like *Homo*), then tree.merger() will stop asking us to provide a source tree where that genus should be placed.

We don't have that source tree, so let's remove species we want to add that do not have their genus in the species tree. Hopefully as we add more trees we'll be able to place those species.


The following runs for ~5 minutes:

```{r}
# the y-cauda species and y-lineata break everything
big_tree <- ape::drop.tip(big_tree, 'Quietula_y-cauda')
big_tree <- ape::drop.tip(big_tree, 'Starksia_y-lineata')


dato <- dato |> filter(bind != 'Starksia_y-lineata') |> 
  filter(reference != 'Quietula_y-cauda')


if (!file.exists('big_tree.Actinopterygii.both.withGeneraAdded.tre')){

  bound_t_merged_bonies_unique_merged <- my_merger(backbone=bound_t_merged_bonies_unique, data=as.data.frame(dato %>% select(-bind_g)),plot=FALSE)
  }
```

```{r}
ape::write.tree(phy = bound_t_merged_bonies_unique_merged, 'big_tree.Actinopterygii.both.withGeneraAdded.tree')
```

## Adding species for which the genera are not in the tree

We have about 3600 species where those genera are not in the tree. What we'll do instead is chuck the species at the root of the family.

So what we have to do: - get the species that are not in the big tree now, get their genera - for each genus, get the family from AFD - calculate the MRCA for all family members that are in the tree - insert the genus/species at the root of the MRCA

so like this, calculating MRCA of species A and B and inserting there:

```         

    --- A
    |
----|
    |
    --- B
```

becomes

```         
     --- A
     |
|----|
|    |
|    --- B
|
|------- Added species
```

We will remove branch lengths for this.

```{r}

still_missing <- setdiff(marine_species, bound_t_merged_bonies_unique_merged$tip.label)
super_merged3 <- bound_t_merged_bonies_unique_merged
super_merged3$edge.length <- NULL # go away branch length
counter <- 1
addeds <- c()
placement_stats <- tibble(
  species = character(),
  placement_level = character(),
  n_relatives = integer()
)

for(spec in still_missing) {
  
  # Get lineage info
  lineage <- a %>% filter(species == gsub('_', ' ', spec))
  if(nrow(lineage) == 0) next
  
  this_genus <- lineage$genus
  this_family <- lineage$family
  
  # STEP 1: Try to find congeners (same genus)
  congeners <- a %>% 
    filter(genus == this_genus) %>% 
    pull(species) %>% 
    str_replace_all(' ', '_')
  congeners_in_tree <- intersect(super_merged3$tip.label, congeners)
  
  mrca_spot <- NULL
  placement_level <- NA
  n_relatives <- 0
  
  if(length(congeners_in_tree) >= 2) {
    # Multiple congeners - use their MRCA
    mrca_spot <- getMRCA(super_merged3, congeners_in_tree)
    placement_level <- "genus_mrca"
    n_relatives <- length(congeners_in_tree)
    
  } else if(length(congeners_in_tree) == 1) {
    # Single congener - bind directly to it
    mrca_spot <- which(super_merged3$tip.label == congeners_in_tree[1])
    placement_level <- "single_congener"
    n_relatives <- 1
    
  } else {
    # STEP 2: No congeners - fall back to family
    family_members <- a %>% 
      filter(family == this_family) %>% 
      pull(species) %>% 
      str_replace_all(' ', '_')
    family_members_in_tree <- intersect(super_merged3$tip.label, family_members)
    
    if(length(family_members_in_tree) >= 2) {
      mrca_spot <- getMRCA(super_merged3, family_members_in_tree)
      placement_level <- "family_mrca"
      n_relatives <- length(family_members_in_tree)
      
    } else if(length(family_members_in_tree) == 1) {
      mrca_spot <- which(super_merged3$tip.label == family_members_in_tree[1])
      placement_level <- "single_family_member"
      n_relatives <- 1
    }
  }
  
  # Bind the species if we found a valid spot
  if(!is.null(mrca_spot) && length(mrca_spot) > 0) {
    addeds <- c(addeds, spec)
    super_merged3 <- bind.tip(super_merged3, 
                               tip.label = spec,
                               where = mrca_spot)
    
    # Track placement statistics
    placement_stats <- placement_stats %>% 
      add_row(species = spec, 
              placement_level = placement_level,
              n_relatives = n_relatives)
  }
  
  # Progress indicator
  if(length(addeds) %% 100 == 0) {
    print(paste0("Added ", length(addeds), " species"))
  }
}

print(paste0("Total species added: ", length(addeds)))
```

```{r}
# Summarize placement statistics
placement_summary <- placement_stats %>% 
  group_by(placement_level) %>% 
  summarise(
    count = n(),
    mean_relatives = mean(n_relatives),
    median_relatives = median(n_relatives)
  ) %>% 
  arrange(desc(count))

print("Placement summary:")
print(placement_summary)
```

```{r}
# Visualize placements colored by method
test_colors <- placement_stats %>% 
  select(label = species, source = placement_level)

p <- ggtree(super_merged3, branch.length = 'none') %<+% test_colors + 
  geom_tippoint(size=1, aes(color = source)) + 
  scale_color_discrete(na.value='transparent') +
  labs(color = "Placement method")
ggsave('tree_with_families_added_hierarchical.png', p, width = 12, height = 20)
p
```

```{r}
write.tree(super_merged3, file = 'big_tree.withGeneraAdded.andFamilies.hierarchical.tre')

```

Let's plot the final tree with all sources colored

```{r}
colors <- tibble(label = addeds, source = 'Added later (hierarchical)') %>% 
  rbind(tibble(label = setdiff(bonys$tip.label, bonys2$tip.label), source = 'actinops1')) %>% 
  rbind(tibble(label = setdiff(bonys2$tip.label, bonys$tip.label), source = 'actinops2')) %>%
  rbind(tibble(label = intersect(bonys$tip.label, bonys2$tip.label), source = 'actinops1+2')) %>%
  rbind(tibble(label = sharks$tip.label, source = 'sharks')) %>% 
  rbind(tibble(label = reptiles$tip.label, source = 'reptilia')) %>% 
  rbind(tibble(label = aves$tip.label, source = 'aves')) %>% 
  rbind(tibble(label = mammals$tip.label, source = 'mammalia'))
```

```{r}
p <- ggtree(super_merged3, branch.length = 'none') %<+% colors + 
  geom_tippoint(size=1, aes(color = source)) + 
  scale_color_discrete(na.value='transparent')
ggsave('tree_with_families_added.all_sources.hierarchical.png', p, width = 12, height = 20)

p
```
